General design: 
	- name all folder with "_" and standard english letters to avoid messed up pathing
	- Relative filepaths
		- use "/" instead of "\" as the latter is an escape character in
	  python
	- use functions
	- explain everything with comments
	- try to avoid hardcoded strings as arguments (use variables / constants so it still matches if changed)
	- pipeline executor files to run pipeline in modules
	- pipeline executor handles conditionals and looping (eg differing folder structures), then have 
	  different subprocesses for each condition, minimal conditionals in subprocesses.
	  The pipeline executor is the master brain, the subprocesses are just workers
	  --> easier bugfixing
	- subprocesses run on minimal dataset (eg one file or one tissue type, looping in executor)
	- standardized filetype (.h5ad) for easier file passing between subprocesses
	- data passed between executor and subprocess via execute_subprocess as paths or python objects
	- temporary files can be permanently saved to a copy if specified
	- all termporary files are automatically deleted after the pipeline finishes
	- outsource commonly used functions to JL_helper_functions library


Error Handling Philosophy for Thesis & Reusable Code

    ✅ Add minimal, practical error checks (e.g., missing files, wrong paths)

    ✅ Provide clear, readable error messages for common user mistakes

    ✅ Prioritize code I can reliably re-run months later without debugging (this is why comments and error handling are important)

    ✅ Keep GitHub repos clean and understandable to show competence, but avoid over-engineering


For future projects:
- at the very beginning, run a script to standardize raw data format
	(eg takes a directory with any format, saves all files a h5ad to another directory and gives them
	 distincitve names eg standardized_GDC_glioma_cancerous_1.h5ad)
